<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2019 B2W Companhia Digital. (http://www.bseller.com.br/)
 * Access https://ajuda.skyhub.com.br/hc/pt-br/requests/new for questions and other requests.
 */

namespace B2W\SkyHub\Model;

use App;
use B2W\SkyHub\Model\Entity\SettingsApiEntity;
use SkyHub\Api\Service\ServiceAbstract;

class Api
{
    /**
     * @var \SkyHub\Api
     */
    protected $api = null;

    /**
     * @var \Skyhub\Api\Service\ServiceAbstract
     */
    protected $service = null;

    /**
     * PostAbstract constructor.
     */
    private function __construct()
    {
        return $this;
    }

    /**
     * @return $this
     */
    private function __clone()
    {
        return $this;
    }

    /**
     * instantiate
     *
     * @return mixed
     */
    public static function instantiate()
    {
        static $instance = false;

        if ($instance === false) {
            $instance = new static();
        }

        return $instance;
    }

    /**
     * apiService
     *
     * @return ServiceAbstract
     */
    public function apiService()
    {
        return $this->api()->service();
    }

    /**
     * Api
     *
     * @return \SkyHub\Api
     */
    public function api()
    {
        if (is_null($this->api)) {
            $settingsApi = new SettingsApiEntity();
            $settingsApi->map();

            $email          = $settingsApi->getEmail();
            $apiKey         = $settingsApi->getApiKey();
            $xAccountKey    = $settingsApi->getXAccountKey();

            $this->api = new \SkyHub\Api(
                $email,
                $apiKey,
                $xAccountKey,
                null,
                $this->getService()
            );

            if (!$this->api) {
                return false;
            }

            $this->apiService()
                ->setLogAllowed((bool)$settingsApi->getLogAllowed())
                ->setLogFileName($settingsApi->getLogFileName())
                ->setLogFilePath($this->verifyFilePath($settingsApi));
        }

        return $this->api;
    }

    /**
     * Verify directory
     *
     * @param SettingsApiEntity $settingsApi
     * @return string
     */
    public function verifyFilePath($settingsApi)
    {
        if (!is_writeable(ABSPATH)) {
            App::logDb(ABSPATH . " isn't writeable", \Monolog\Logger::NOTICE);
            return '.';
        }

        $path = ABSPATH . $settingsApi->getLogFilePath();
        if (!is_dir($path)) {
            if (!mkdir($path, 0755, true)) {
                App::logDb("It isn't possible to create directory " . $path, \Monolog\Logger::NOTICE);
                return '.';
            }
        }

        if (!is_writeable($path)) {
            App::logDb($path . " isn't writeable", \Monolog\Logger::NOTICE);
            return '.';
        }

        return $path;
    }

    /**
     * Set the value of service
     *
     * @param  \Skyhub\Api\Service\ServiceAbstract  $service
     *
     * @return  self
     */ 
    public function setService(\Skyhub\Api\Service\ServiceAbstract $service = null)
    {
        $this->service = $service;
        $this->api = null;
        return $this;
    }

    /**
     * Get the value of service
     *
     * @return  \Skyhub\Api\Service\ServiceAbstract|null
     */ 
    public function getService()
    {
        return $this->service;
    }
}
